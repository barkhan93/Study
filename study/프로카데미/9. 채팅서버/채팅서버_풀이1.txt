패킷모양은 
Code - Len - [RandKey] - CheckSum- Payload일때,
RandKey를 암호화대상에 넣지 않은 이유는?

암호키가 K라고할때..
R^K, P^K^R 이런식으로 될 것.

암호키 R^K랑 P^K^R을 해버리면 페이로드가 나와버림

-----------------------------------------------------------------------

체크섬 - 암호화를 같이 하는이유는?

암호화만하면 복호화했을때 제대로 복호화된 데이터인지 알수가없음.
따라서 복호화하고 체크섬을 통해 내 데이터인지 확인.

-----------------------------------------------------------------------

체크섬 - 암호화의 목적은?

어차피 클라-서버 송신하므로 데이터는 다 공개됨.
패턴을 감추고자 간단한 암호화를 진행하는 것.

-----------------------------------------------------------------------

직렬화버퍼를 멀티스레딩으로 어떻게 송신?

싱글톤을 멀티스레딩환경에서 스레드세이프하게 못만드는것과 같음.
인터락으로도 불가능. 결국 락으로만 해결가능.
따라서 반복문 돌리면서 할당하여 보내야함.

-----------------------------------------------------------------------

그냥 인코딩을 사용자가 해서 보내면?

가능은 하지만 설계상 좋지않음.

-----------------------------------------------------------------------

랭킹서버를 만든다고하면 방법은?

1. 기존걸 뱉다가 특정 기점(요청개수나 시간)에 락걸고 소팅.
2. 사본을 만들어두고 사본만 준다. 원본은 요청이들어오면 소팅.

Map으로 삽입/삭제가 나을지, 정렬이 나을지는 직접테스트 해봐야암

-----------------------------------------------------------------------

채팅서버에서 플레이어와 맵락을 왜 같이감?

어차피 싱글스레드고 맵이락걸리면 플레이어도 걸림.
반대도 마찬가지.
따로갈 이유가없음

-----------------------------------------------------------------------

현재 서버에 OnClientLeave의 문제점은?

컨텐츠쪽의 스레드가 여러개라면..
SendPacket이 여러번 호출이 가능.

따라서 동시에 OnClientLeave가 호출이 될수있음
그럼 락이 두번걸릴수있는데, 이때 SRWLock이면 재귀락이 걸림

-----------------------------------------------------------------------

Jop은 어떤 형태로 던질 수 있나

클래스로 상속하는 형태(커맨더패턴)
구조체로 선언하는 형태

-----------------------------------------------------------------------

JOPQ는 뭘로 던질수 있나

락프리큐, APCQ, IOCP

-----------------------------------------------------------------------

범용적인 메모리풀 설계

MS의 LFH(저단편화 힙)처럼 다양한 버킷단위로 관리

-----------------------------------------------------------------------

그럼 힙은 어떻게 할당함?

그냥 순차적으로 내려가면서 할당함.

-----------------------------------------------------------------------

LFH는 어떻게 구현될까?

MS의 LFH같은 경우 버킷이 10개이상 존재. 규격에 맞춰 뱉음.
MB단위라면 VirtualAlloc을 개별적으로 페이지를 따로 떼어줌.

-----------------------------------------------------------------------

로그인서버는 왜 별도로 존재하는가

1. DB커넥션
2. 보안(비대칭키. https로 가는이유)

-----------------------------------------------------------------------

로그인서버의 역할은?

토큰발급. 그리고 사용자와 게임서버에 넘겨준다.

-----------------------------------------------------------------------

대칭키/ 비대칭키 암호화란

암호화하는 키와 복호화 하는 키가 똑같은 암호화를 뜻함
반대로 비대칭키 암호화란 인코딩키와 디코딩키가 서로다른 암호화

-----------------------------------------------------------------------

RSA암호화란?

비대칭키 암호화로, 매우큰 수의 소인수분해를 통해 브루트포스로
풀기 불가능한 시간이 나오게끔 하는 암호화.

-----------------------------------------------------------------------

AES암호화란?

대칭키 암호화로, 미국방부에서도 사용할 만큼 믿을만하다.
하지만 결국엔 키가 외부로 노출되는 위험성이 존재한다.

-----------------------------------------------------------------------

비대칭키의 단점은?

너무느리기때문에 보통 대칭키와 비대칭키를 섞어서 사용한다.

-----------------------------------------------------------------------

https는 무슨 암호화인가?

키에 대한 공유는 RSA암호화, 대칭키 AES암호화.

-----------------------------------------------------------------------

토큰도 어차피 노출되지않나?

1회용이므로 상관없다.

-----------------------------------------------------------------------

클라/서버가 발급받은 토큰확인은 어떻게?

1. 로그인서버가 모든게임서버한테 뿌림
-> 부담이 너무큼


2. 유저로그인하고, 서버까지선택. 
로그인서버는 해당서버에 토큰발송
게임서버에서는 일치하면 접속.

->로그인서버와 클라간 연결이 계속 유지되어야함.
(서버선택하는 시간이 오래걸리지않으므로 크게 문제되지는 않음)


3. 유저로그인하고, 서버까지선택.
 유저가 게임서버에 연결시 게임서버가 로그인서버에 연결하여 토큰확인.
-> 로그인서버가 언제까지 토큰을 들고있는가.


4. 별도 토큰서버 둠.

-----------------------------------------------------------------------

토큰DB vs 토큰서버

이서버가 DB가 되면 게임서버가 DB와 연동해야하므로 부담이생김.
(DB도 많이들 사용하는 방법이긴함)

-----------------------------------------------------------------------

토큰서버의 할일은?

AccountNo와 토큰을 짝으로 들고있으면 된다.

-----------------------------------------------------------------------

클라가 로그인하는 과정을 설명하면?

1. 클라가 로그인서버에 로그인. ID/PAS인증받고 토큰발급.
2. 클라는 토큰을 들고 게임서버 접속.
3. 게임서버는 이 토큰이 맞는지 토큰서버에 가서 확인
4. 최종접속

이때 3.은 게임서버가 토큰서버에 직접갈수도있고, 요청할수도있음

-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
