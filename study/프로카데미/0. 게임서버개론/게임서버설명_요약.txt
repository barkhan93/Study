p2p구조와 클라-서버 구조

지금 나오는 대부분의 게임은 stateful로 간다.
오버워치, 클래시로얄 등..

원래라면 p2p로 돌렸겠지만, 요즘은 핵때문에 서버가 모든것을 제어.
클라는 오로지 뷰어 역할.

--------------------------------------------------------------------------

MO와 MMO의 개념

MMO : Massive Multi Online (수천명)
MO : Multi Online(방을 만들어 게임. = 세션형게임)(ex 스타, 디아블로, 배그)

풀/리스 개념을 가지고 MO/MMO개념을 나누기에는 힘들어짐.

--------------------------------------------------------------------------

stateful 

상태가 있는 서버(MMORPG기반 동기화 서버)
게임의 모든것이 서버메모리를 기준으로 실시간 관리.

실시간 DB저장하지만, 한박자 늦은 보관의 목적인 백업.

보통 동접 5천명정도면 잘만든 서버
(ex 리니지 레볼루션 동접자 7천명. 1,2천명짜리 서버 허다함)

--------------------------------------------------------------------------

stateless

상태가 없는 서버(모바일 웹기반의 비동기 서버)
스테이트 리스는 대부분이 웹환경이며, 메모리가 없음.
최신정보는 모두 DB에 보관

보통은 연결의 개념이 없다.(있어도 상관은 X)

--------------------------------------------------------------------------

stateless 처리방식

[서버한테 요청 -> DB데이터 긁어와서 로직처리 -> DB반영 -> 유저한테 결과줌]

동기화된 상태메모리가 없기에 똑같은 코드의 게임서버가 여러대 붙어도 상관X
결국 다 같은 DB로 갈것이기 때문.

DB에서 read/Write가 계속되므로 빠른처리는 불가능하다.

--------------------------------------------------------------------------

스케일 아웃

수평확장(서버 여러대 추가), 지속확장이 가능.
저렴한서버, 운영비용 큼
서버가 늘어날수록 편의성 떨어짐
서버가 분산되어 있으므로 장애 가능성 적음

--------------------------------------------------------------------------

스케일 업

수직확장(하드웨어 스펙자체 업글), 성능확장 한계
비싼 서버, 운영비용은 큰 변화없음
한대서버 부화 집중되므로 장애영향도 큼

--------------------------------------------------------------------------

게임서버 - 물리서버 추가

서버,DB가 분리되며, 내가 선택한 서버에서만 플레이가 가능하도록 한다.
DB에서 정보를 저장하기때문에 서버-DB는 세트로 가야함

--------------------------------------------------------------------------

물리서버 통합시 문제

DB에 저장 시 DB에 제공하는 auto increment를 이용하는데, 
서버를 통합하면 해당 Count가 겹치게 되므로 문제 발생
(string검색은 매우 비효율적)

보통은 신규가입 차원에서 새로 꽂아넣는 방식을 채택.

--------------------------------------------------------------------------

물리서버 통합을 고려한 해결책

이러한 설계는 처음부터 계획되어 있어야한다. 없다면 잘못만든 서버

1. 유니크값을 매겨주는 단독서버 또는 단독DB를 따로 둔다. (권장)


2. 서버마다 복잡한 공식을 토대로 만듬.
	8byte로 커버 X, 가독성 X


3. 처음부터 구역 지정
	서버1(1~1억) 서버2(1억1 ~2억)...

--------------------------------------------------------------------------

게임서버 기능분산


1. 로그인 서버

	로그인서버를 거쳐 게임서버로 들어가는 구조


2. 채팅서버(전체,지역채팅)

	클랜,파티,귓속말 채팅 등은 서버 내에서 처리.
	독립적으로 분리가 가능한 채팅만 서버로 분리.
	부하가 거의없기때문에 게임서버로 통합되는 추세
	
3. 경매장 
4. 길찾기 (매우느린 알고리즘)

--------------------------------------------------------------------------

게임서버 기능분산 고민

기능과 로직을 분산시키면 로직이 엄청나게 복잡해지기 때문에,
그럴만한 가치가있는지 고민해보고 서버를 분리해야 한다.

단순한 AI, 퀘스트같은 것들은 오버헤드가 더 크기때문에 비권장
데이터를 주고받는데 더 오래걸림(RTT)

--------------------------------------------------------------------------

레이턴시 - 물리적 변화에대한 지연시간

핑 - 상대컴퓨터의 L3계층까지 다녀오는데 걸리는 시간 (=네트워크 레이턴시)

오버워칭 핑은 보통 5m/s(5/1000초) = 500프레임
모니터 60Hz(1초에 60번주사)라면 갔다와도 모니터는 아직 주사조차 X

--------------------------------------------------------------------------

RTT(Round Trip Time)

인터넷 상에서 상대측 호스트까지 패킷이 왕복하는데 걸리는 시간
핑은 L3까지, RTT는 L7까지의 왕복시간을 말한다.

--------------------------------------------------------------------------

RTT 수치

네트워크 레이턴시가 적다고해도 1,2m/s정도 나옴
RTT까지 몇십m/s정도 포기
서버 분산시 이러한 오버헤드를 감안하고 가야한다

--------------------------------------------------------------------------

동기화 로직 서버분산

동기화로직인 경우 일을 요청하고 붙잡혀있기 때문에 의미없어보이나,
붙잡힌동안 CPU가 쉬고있기 때문에 그시간에 다른애가 돌 수 있음.

이렇게되면 효과를 볼수 있겠으나 설계자체가 매우 복잡해진다

--------------------------------------------------------------------------


서버의 지역분산

똑같은 역할을 하는 게임서버를 맵에 따라 분리

장점 : 한서버에 많은인원 수용해야 하는 환경시 고민해볼만함
단점 : 서버가 많아질수록 관리가 매우힘들어진다. (아이템복사가 흔한구조)

--------------------------------------------------------------------------

맵 로드방식 - Semless

플레이어가 맵 이동전 나타나야할 지형을 예측하고 미리준비
월드가 끊어지지않고 자연스럽게 주변지역 로딩
하드웨어적 제약, 맵로딩 시간 김

ex) 검사, 마인크래프트, 배그, 리니지2M, 원신 등

--------------------------------------------------------------------------

맵 로드방식 - Zone

semless와 반대로, 맵을 이동할때마다 로딩하므로 잦은로딩
하드웨어 부담적음, 퍼포먼스 최적화에 도움

다른존에 있는 객체끼리 이벤트 불가

ex) 메이플, 아이온, 로아, 마영전, V4


3. Room 

방이오픈되고 방 안에서 미션또는 대결을 하는 방식
ex) 던파, 서든, 롤, 오버워치 

--------------------------------------------------------------------------

Seamless맵 분산

분산하지 않는 것을 권장하나, 어쩔수없이 분산해야 한다면
심리스라고해도 경계를두면 된다.

유저입장에서는 잘 느끼지 못하지만 특정 컨텐츠가 안되도록 설계

Seamless분산에 대해 많은 논의가 있었지만 분산할 가치가 있는지의문

--------------------------------------------------------------------------

서버 분산 결론

게임서버에서 분산은 크게 기능분산과 물리분산이 있다.

독립적으로 처리가 가능한것들은 서버분산을 고민해볼수 있음.
이외의 것들은 권장하지않음.

--------------------------------------------------------------------------

게임서버 DB

DB는 데이터순서가 정확히 맞아야 하므로 거의 단일로간다.

같은 서버군안에 채널을 여러개두고, 하나의서버안에서 DB를 공유하는방식

--------------------------------------------------------------------------

서버군 증가 - 서버-DB 세트로묶어서 물리서버 증가

채널 증가 - 한대의 게임서버에 여러DB커넥션을 둠

--------------------------------------------------------------------------

채널

같은 서버군이지만 다른채널이면 만날 수없음

언제든 채널을 바꾼다면 만날 수있다.

BM모델입장에서도 한서버안에 많은 사람을 두기보다는 채널증가가 나음


중국에 서비스되는 뮤 오리진은 간단하게 싱글스레드로 서버를 찍어낸후,
서버군을 천개까지 늘림.

--------------------------------------------------------------------------

채널증가로 인한 DB부당

개발사/유저입장 둘다 서버군을 나누기보다 채널만 나누는것을 좋아한다.
하지만 채널만 늘리게된다면 DB하나로 서버들을 감당해야하고,
이는 DB하나로 감당이 불가능하다.

(DB성능이 좋아져 한대 게임서버에 여러커넥션을 두는 형태로 채널을 늘렸지만
채널만을 계속해서 늘린다면 DB쪽도 버티지못함)

--------------------------------------------------------------------------

DB분산에 대한 방법

모든 저장데이터를 단하나의 DB로 해결해야 한다면, DB분산이 필요할 것이다.

--------------------------------------------------------------------------

트랜잭션

관계형 데이터베이스에는 트랜잭션이라는 기능이 존재한다.
여러개의 작업을 하나의 묶음으로 처리하는것.
(트랜잭션 작업은 메모리에서만 작동됨)

모든 RDBMS(관계형 데이터베이스)는 트랜잭션이 보장된다.
게임에서도 아이템거래, 현거래같은 경우 트랜잭션으로 묶는다.

--------------------------------------------------------------------------

게임에서 트랜잭션을 하는이유

1. 논리적인 오류

stateful서버의 경우 서버에서 로직이 돌기때문에 DB에서 논리오류가 날일X
(이미 서버검증을 거치고 DB에 반영만 하는 것이기 때문)


2. 서버가 죽은 경우

하드자체가 나가버리는 경우(블루스크린 등).
대부분 서버하드웨어를 교체하는등의 조치가 있기때문에 거의 가능성이 없음.

--------------------------------------------------------------------------

게임에서 트랜잭션 찬성입장

그래도 안전을 위해 하는편이 낫다.

--------------------------------------------------------------------------

게임에서 트랜잭션 반대입장

100%가 아니라면 성능만 떨어뜨리므로 안하는게 낫다.

--------------------------------------------------------------------------

DB분산시 트랜잭션

두개의 DB를 대상으로 트랜잭션을 거는게 쉽지않다.
MsSQL은 이러한 기능자체가 제공되나 성능이 많이 떨어짐.

--------------------------------------------------------------------------

1. DB분산 - 용도(컨텐츠)별로 DB를 따로둠

하나의 서버에 기능별로 DB를 분산시키겠다는 뜻
더이상 확장이 불가능한 단점이 있음.

DB가 물리적으로 분리된다면 트랜잭션을 거는것이 어려워지고, 
MySQL은 기능자체는 제공되지만 이 마저도 성능이 떨어진다.

--------------------------------------------------------------------------

2. DB분산 - 복제하는방법(Repliecation)

한대의 MasterDB와 여러대의 SlaveDB를두고 실시간으로 복제.
(MySQL에 있는 기능)
분산(성능) 목적이 아닌 고가용성을 위해 나온 기능이다.

이를 분산으로 쓰고자한다면 Master를 Write로, Slave를 read로 분산.
Slave는 Write가 불가능하고, 몇대로 늘리든 상관없다.(설정만 변경)

--------------------------------------------------------------------------

리플리케이션 추가

대부분 현존하는 웹사이트는 리플리케이션으로 돌아간다.(ex 위키백과)
단 페이스북, 구글, 네이버와 같이 큰곳은 예외이다.

(접속자에 비해 글을 쓰는사람이 1%미만)
완벽한 실시간은 아니며, 몇m/s부터 몇초까지의 오차도 발생한다.

게임컨텐츠는 실시간이므로 이러한 형태의 오차는 허용되지않음.

--------------------------------------------------------------------------

3. DB분산 - 샤딩

블로그, 페이스북 등이 샤딩에 매우 적합한 구조이다.
어느유저가 어떤DB에 들어갈건지 결정만 하면된다.

기준은 정하기 나름(지역,유저,캐릭터,국가....)

--------------------------------------------------------------------------

DB샤딩이 적용되는 게임

배그나 옵치는 서버 선택없이 아시아/유럽정도만 나뉠뿐 DB선택 X
전세계 사람들이 같은위치에서 속할 서버만 고르면 된다

아시아채널에서 하다가, 유럽으로 옮겨도됨.(채널이랑 비슷한맥락)

이는 글로벌을 묶어주는 하나의 DB시스템이 있는것이고, 이것이 샤딩이다.
샤딩은 계속 추가만 해주면 되기때문에 확장성을 가지고있다.

--------------------------------------------------------------------------

DB샤딩에 대한 단점

서로다른 DB커넥팅이 있다면 동시에 진행이 되어야 한다.
하나의 행동으로 이어지지 못하기때문에 위험하다.

때문에 옵치나 배그같은 경우 유저끼리 거래가 되지않음.

아이템 구매/장착 등은 로비에서 이루어진다.

또는 거래자체를 막아버리고 경매장을 이용하도록 한다.

--------------------------------------------------------------------------

DB분산 결론

DB분산은 대부분 웹에 있는 기술.
웹쪽에서는 리플리케이션이 바람직하며 샤딩역시 큰 웹사이트라면 바람직함.

MMO는 절대 분산을 하지않고, 단독으로 가는것이 일반적이고 무난한방법이다.

--------------------------------------------------------------------------

서버-클라 구조

클라는 오로지 뷰만 보여주고, Input역할을 한다.
모든로직은 서버에서 처리되며, 클라데이터는 믿지않는다.

--------------------------------------------------------------------------

서버-클라구조 길찾기 알고리즘

클라에서 길을 찾으면 핵이 나올수있으므로, 서버가 길을 찾아야한다.
따라서 서버CPU부하를 완전히 없애는 방법은 없으며, 줄이는 방안을 모색


1. 어떤길로 가는지까지 서버가 판단하여 클라에 전달

서버의 CPU부하증가, 네트워크 전송량 증가


2. 서버가 허용하면 각 클라이언트가 길을 찾아감

클라요청 -> 서버검증 -> 클라에게 목적지 전달 -> 클라이동
단, 이경우는 막힌길이 유동적으로 바뀌는 경우가있다면 이 방법은 사용X


3. 서버가 길을찾은 후, 실시간으로 클라에 전달하는 방식 (권장)

--------------------------------------------------------------------------

서버-클라 동기화 이슈

서버-클라 레이턴시만큼 한박자 늦게 클라가 움직일 것이다.
이때 클라가 얼마나 티안나게 서버의 명령을 빠르게 적용시킬것인지가 관건

--------------------------------------------------------------------------
타겟팅과 논타겟팅

공격처리 연산시 대상객체를 찾는것이 가장 부하가 클것이다.
3D MMO라면 확인해야할 오브젝트도 많고 폴리곤 충돌 계산이 많을 것.


타겟팅 - 대상이 정해져있기 때문에 간단하게 끝난다.
논타겟팅 - 서버가 다수의 객체를 대상으로 충돌판단을 해야하므로 부하큼

이때 서버-클라간 동기화가 엄격하지않다면 유저들이 판정에 불만이 생길 것.

--------------------------------------------------------------------------

오토타겟팅

직접 타겟을 선택해야 했던 타겟팅 방식에서,
캐릭터의 시야전방에 있는 몬스터에게 자동으로 타겟팅 되는 방식

유저는 논타겟팅처럼 액션감을 느낄 수있고,
실제로는 타겟팅 방식이기 때문에 서버로직은 가벼워진다.
(에임핵이 자체 내장된 느낌이다)

--------------------------------------------------------------------------

논타겟팅의 경우

좌표가 차이날경우 문제의 소지가 있다.
클라-서버의 완전한 동기화는 난해하고, 구현한다해도 
재미나 완성도에 크게 기여를 하지않으므로 논타겟게임은 거의없다.

--------------------------------------------------------------------------

타겟팅 - 마영전에서 선택한 방법

클라A가 클라B에게 칼을 휘둘렀을때 맞았다는 모션을 보여주고 잠깐정지
서버로부터 검증을 기다린다. 이후 서버로 부터 온 결과로 진행.

약간의 지연시간이 생겼지만 오히려 타격감이 생긴 경우이다.


--------------------------------------------------------------------------

캐릭터 이동 - 키보드

마우스클릭은 목적지가 정해지지만, 키보드는 목적지를 알수 없다.

사용자가 키보드에서 손을 뗄 때가 목적지이고, 그 즉시
송신해도 좌표가 틀어질 수 밖에 없다.
(네트워크 레이턴시가 없다고해도 4~50m/s정도는 발생)


따라서 기획적으로 커버하거나 이동단위를 넣는것이 일반적이다.
(듀랑고나 리니지는 네트워크가 끊기면 이동조차 되지않는다.)

--------------------------------------------------------------------------

마우스로 방향을 잡고 키보드로 이동

매프레임을 보내 동기화시키지 않는이상 틀어질 수밖에 없다.
매 프레임 동기화는 MMO에서는 불가능하다.

FPS에서 이를 완벽하게 잡고자 프레임마다 쏘고있다.
(ex 배그)

--------------------------------------------------------------------------

마우스로 방향을 잡고 키보드로 이동 - 더미사용

캐릭터를 조작하는것이 아니라 캐릭터 앞에 더미를 만들어두고,
더미가 이동하면 캐릭터가 따라 움직이게 만든다.

이 경우 키를떼도 더미까지는 캐릭터가 움직이게된다.
완벽하게 좌표를 일치시킬 수 없기 때문에 즉각적인 액션이 나오지않음.

더미방향과 로직에 대한 계산식을 그대로 따라받아 이동하는것도 매우좋음.

실제로 현업에서 사용하는 방법이다.

--------------------------------------------------------------------------

특정 엔진에 내장된 물리엔진 사용

서버와 로직이 똑같아 져야하기때문에 유니티에 있는 길찾기도 쓰기어렵다.
물리엔진에서 자기멋대로 처리하기 때문에, 보통 MMO클라쪽에서는 물리엔진 X

따라서 물리엔진을 끄고 서버가 명령하는대로 처리하는것을 권장

--------------------------------------------------------------------------

FPS에서의 동기 - 비동기 문제

오버워치역시 모든 로직을 서버에서 처리한다.
클라-서버간 오차를 정확하게 따진다면 유저들의 반발이 심해지므로,
어느정도 허용치를 둬야한다.

클라-서버 구조든, p2p구조든 완벽한 해결책이 없다.

--------------------------------------------------------------------------

로직차원에서의 롤백

국내에선 쓰이지않지만, 외국에서 쓰이는 방법이다.

2프레임에 총을쐈는데 다른사람 화면에서 맞지않는걸로 판정이 난다면
2프레임전으로 내부로직을 돌려 충돌을 재판정하게끔 한다.

-------------------------------------------------------------------------

락스텝 동기화

락스텝은 MO이고, 본인이외의 모든 클라에게 매 프레임마다 전송해야한다.
다른 클라의 프레임이 도착하지않는다면 게임자체가 멈춰버린다.

즉, 모든 프레임을 완벽하게 동기화시킨다.(ex 스타크래프트)


유닛모두를 동기화시킨다면 MMO급으로 볼륨이 커지기때문에,
매프레임 동기화시키는 방법을 채택한다. 
MMO에서는 쓸수없으며, 소규모 전략시뮬레이션이 채택하는 방법이다.

--------------------------------------------------------------------------

p2p게임

네트워크 랜게임이 온라인화 된 구조라고 봐도 무방(ex 스타배틀넷)

서버가 일체 관여하지않으며, 클라끼리 모든것을 해결한다.

--------------------------------------------------------------------------

p2p의 장점

서버를 거치지않으므로 더 빠르게 처리되며, 서버부담이 없다.

--------------------------------------------------------------------------

p2p의 단점

가장큰 단점은 핵을 막을 수 없는 것.
값을 바꿔치기하면 어떤 검증없이 그대로 적용된다.

콘솔게임은 대부분 핵을 쓰는것이 불가능하므로 p2p방식을 채택한다.
PC-모바일의 경우 핵때문에 서버-클라 구조로 가야한다.

--------------------------------------------------------------------------

대부분의 게임구조

서버기술의 발전과 네트워크환경개선으로, 대부분은 서버-클라 형식으로간다.
기존에 p2p인 게임들도 서버를 하나두고 연결한다. (ex 프리스타일)

클라에 있던 코드엔진을 서버로 그대로 가져와 검증을 거치고,
이상한 값이라면 블락시킨다.

액션성이 강한 게임인 경우 오차를 줄이기위해 약간의 허용치를 두는데,
이 허용치를 찾아낸 발전된 핵이 나오고 있다.

--------------------------------------------------------------------------

로비 서버

MO의 경우 대부분이 로비서버를 가지고있다.
던파는 걸어다니며 채팅을 하는 실시간 서버로 MMO느낌이 나긴하지만,
단지 방에대한 정보를 관리하고있을 뿐 실제로 컨텐츠가 일어나는것은 아니다.

로비에서 실제 게임으로 접속이 될 때 로비에서 준비완료된 유저에게 
어디로 접속할건지 알려준다.


--------------------------------------------------------------------------

HOST방식 - 공유기사용자 문제

포트리스 시절, 공유기를 사용하는 사람은 방을 만들지 못했다.
공유기를 쓴다면 사설IP를 사용하고, 공인IP를 공유기가 알고있는 상태.

방을 만드는 사람이 접속해야할 IP를 알려줘야하는데,
공유기를 사용한다면 해당IP는 공유기의 공인IP가 되버린다.
따라서 유저들은 공유기에 접속을 시도하는 꼴이됨.

때문에 공유기를 사용한다면(사설IP유저) 방을 만들지 못하게 막고,
현재까지도 그런 경우가 많다.

--------------------------------------------------------------------------

홀펀칭

위와같은 문제의 해결로, 공유기를 뚫고 안쪽까지 들어가게하는것이 홀펀칭.
홀펀칭은 100%가 불가능하며, 프라우드넷 역시 80% 언저리.

--------------------------------------------------------------------------
홀펀칭 실패시 차선책

공유기에 게임기능이 들어가 해당게임에 쓰는 포트를 열어주는 방식.

이는 n포트를 열었다면 공인IP에 n으로 뭔가 들어온다면 무조건 포워딩.
내가 마치 공유기 IP를 가지고있는 것처럼 된 것

--------------------------------------------------------------------------

VPN(Virtual Private Network)

회사안 인트라넷(외부 접근불가능한 내부사설망)같은 경우,
해당 회사의 IP대역 안에서만 서버에 접근할 수 있다.

이때 VPN을 설치하여 VPN서버로 접속하면 VPN을 통해 해당 인트라넷 접속가능.

외부에서는 VPN장비와 통신하고, VPN장비는 IP대역안에 있는것처럼 작동
VPN장비가 경유지가 되는 것이다.

--------------------------------------------------------------------------
하마치 (VPN)

바깥에 있는 다른유저들이 공유기에 막혀 들어오지 못하는 경우,
앞서 언급했듯 포트를 열어주거나(홀펀칭),
외부 VPN서비스를 사용해 VPN으로 들어가고 유저한테는 VPN주소를 알려준다.

다른유저는 VPN접속을 하게되고, 실제로는 나한테 오게된다.

별도의 공인IP를 할당받는 느낌으로, 경유지를 거치므로 성능은 떨어진다.

--------------------------------------------------------------------------
p2p - super peer방식 

슈퍼피어는 p2p시스템의 모델이다.
p2p같은 경우 서버로 연결을 하긴하지만 로직처리는 본인이 직접담당.

역시 핵이 나올수있다.


--------------------------------------------------------------------------

p2p - Real p2p방식

모든접속자가 서로간 빠짐없이 연결을 하는 방식이다.
내정보를 내가판단하고 다른접속자들한테도 뿌린다.

응답속도는 빨라지나 관리가 힘들어진다.(모든 접속자가 홀펀칭에 성공해야함)

게임에서는 Real p2p보다는 super peer방식을 더 많이 사용한다.

--------------------------------------------------------------------------

(p2p)서버프로그래머의 할일

클라프로그래머는 네트워크 지식이 0이므로,
클라이언트에 들어가는 모듈, 네트워크 파트 모두가 서버프로그래머 담당이다.

함수만 호출하면 해결되게끔 만들어야하고, 그외적인 문제발생도 클라파트에
서버프로그래머가 투입되어 해결해야한다.

p2p의 경우 서버가 들어있기 때문이다.

--------------------------------------------------------------------------

릴레이 서버

모든 유저들이 릴레이 서버로 접속.
릴레이서버는 어떠한 일도 하지않고 패킷이오면 다른접속자들에게 전달.

로직이 모두 클라에 들어가기떄문에 서버부하가 적어 몇만명도 커버가능.

예전에는 다른방법이 없어서 릴레이 서버를 운영하는 경우였으나,
지금은 처음부터 홀펀칭 자체를 시도하지않고 100%릴레이로 가기도한다.

홀펀칭은 성공률이 100%가 아닌데다가,
우리나라 인터넷환경이 좋기때문에 릴레이서버로 해도 응답지연을 느끼기힘듬.

스트리트 파이터 아레나가 릴레이 서버로 구현되었다.
--------------------------------------------------------------------------

프라우드넷 같은 경우 

다양한 방법을 통해 연결을 시도하고 다시보낼테니 일단 p2p로 보내라.
내부적으로 홀펀칭, 릴레이 서버 등 다양한 시도를 한다.

요즘추세는 홀펀칭은 더이상 사용하지않는다.

--------------------------------------------------------------------------

MO추세

자동으로 매칭하기때문에 매치메이킹서버, 배틀서버등 전혀 다른구조로 간다.
(ex 배그, 오버워치, 하스스톤 등...)

p2p자체가 많이 사용되지않는다.

로비서버에서 설정을 마치고 배틀서버중 어디에 들어갈것인지 결정한다.
이때 한서버에 몇개의 게임이 진행될 것인지 개발자가 정한다.

배그같은 경우 한서버에 하나의 게임만 돌고있다.(언리얼에 따라간다)

--------------------------------------------------------------------------







------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------