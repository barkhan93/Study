캐릭터 동기화 시키기

좌표 동기화 -> 비효율적
시간과 같은 단위를 기준으로 간격을 나눠 보냄

------------------------------------------------------------------

데드레커닝

이 간격마다의 이동을 부드럽게 하기위해 좌표를 온것을 기준으로
중간과정을 계산

모든클라에는 데드레커닝이 들어가야한다.

[현재좌표, 이동방향, 시간]을 가직고 있다면 계산이 가능.
하지만 즉각적이고 불규칙적인 이동에 대해서는 계산 불가능.

이때 생기는 오차는 허용범위 안쪽으로 최소화 하는것을 원칙

------------------------------------------------------------------

캐릭터이동

MMO의 경우 클라요청 - 서버응답을 받아 가는게 맞음.
MO의 경우 서버에 통보하는 형태로 감. (또는 액션성 강한게임)

일반적으로 클라는 view를 보여주는 Input일 뿐

------------------------------------------------------------------

게임에서 방향은 매우 중요하므로, 서버는 항상 기억한다.
필드에서 움직이는 MMO의 경우 메시지 프로토콜구조를 최소단위로.
목적지가 같으면 끝이므로 목적지 공유방식,
키보드가 입력장치라면 아주 짧은 미래

------------------------------------------------------------------

Send메시지 설계

Send메시지당 함수를 하나씩 만드는 방식.
보내고싶을때 API send를 호출한다면 관리하기 힘듬.

인자를 최대한 풀어서 해당 함수 자체에서 컨텐츠쪽과 의존성을 떼야함.

------------------------------------------------------------------

프로토콜 설계

메시지별로 껍데기를 잡음.
분기문(swtich, 다형성, 함수포인터 등)을 타고 잘 도착하는지 확인

------------------------------------------------------------------

직렬화버퍼 설계

네트워크 프로그래밍시 직렬화버퍼 클래스가 호출량이 가장 많음.
따라서 성능에 크게 좌지우지 될것이다.

인자 타입별로 오버로딩함수(<<, >>)를 하나하나 선언하지않고
템플릿으로 가는경우,

모든타입을 T로 커버해야 하므로 메시지선언마다 타입을 선언해줘야한다.

char* -> 주소값을 보낸다는것은 말이되지않으므로, 문자열로 인식.

------------------------------------------------------------------

직렬화 버퍼 예외상황

1. 버퍼초과

보통 게임이라면 1000byte를 초과할일은 없을것이나..
부족하다면 버퍼 크기를 늘려줘야한다.

이때 로그로 꼭 알려줘야한다.(바깥으로)
서버의 생존유무만으로는 정보가 부족하기때문에, 로그매일확인필수.



2. 사용자가 잘못 사용한 경우 (규칙위반)

예를들어 10byte메시지가 와야하는데 5byte만 왔다면
나머지 5byte는 쓰레기값으로 돌게 될 것이다.

이는 디버깅상황에서 잡아야하지만, 가변프로토콜의 경우 라이브서비스
도중에 나타날 수도있다.

이 경우 바깥으로 알려줄 방법이없다. 

------------------------------------------------------------------

2번의 해결방안

WSAGetLastError와같이 flag를 둔다.
이경우 모든 직렬화버퍼 마다 예외코드가 들어가야하므로,
PacketProc부분을 try catch문으로 묶어버리면 용이할 것.

------------------------------------------------------------------

직렬화버퍼로 아이템객체, 또는 아이템목록을 전달하고싶을때

외부에서 오버로딩으로 아이템리스트를 넣으면,
내부에서 요소를 하나씩 뽑아넣도록 할수 있겠음.

------------------------------------------------------------------


Setlocale

#include <locale.h>
char *setlocale(int category, const char *locale);

프로그래밍은 일반적으로 영어기반이므로, 언어 설정을 해야함.
이와같은 설정을 하지않으면 가장 기본적으로 파일입출력시 한글 폴더명 인식X

------------------------------------------------------------------

채팅서버예제. 능숙해질때까지 연습할 것


------------------------------------------------------------------









-------------------------------------------------------------------
RPC따로 마지막에 정리할 것.

RPC(Remote procedure call)

어떤 메시지를 만들어 Send를하면, 수신부쪽에서는 메시지에 따른
분기를 타고 행위를 한다.

이를 자동화 시켜놓고 보니 마치 원격지에 있는 함수를 호출시키는것과 같다.

------------------------------------------------------------------

고전적인 방법에서의 메시지 추가

1. 새 메시지 ID정의
2. 메시지에 대한 구조체정의
3. 구조체를 전송하는 함수 정의
4. 이를 받아서 읽기위한 case절 정의






------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------