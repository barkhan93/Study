유니코드 표준화

대부분의 OS, 앱, 웹사이트, DB, 텍스트파일 모든곳에서 유니코드 사용이 표준.

유니코드는 단순히 번호가 매겨진 글자표이며,
유니코드를 표현하는 인코딩이 추가로 들어가야한다.

유니코드는 2byte를 기본으로 하지만 모든문자를 2byte로 표현하지는 않음.
유니코드역시 UTF-8인코딩의 경우 1Byte를 기본으로 사용한다. 

(한글은 3byte로 비효율적인것 같지만 html코드는 모두 영어임.
사용자에게 보이는 글자는 한글이나 80%이상은 영어로 되어있다.)

-----------------------------------------------------------------------------

SBCS (Single byte Char Set)	영어 - 1byte 한글 - X
MBCS(Multi byte Char Set)	영어 - 1byte 한글 - 2byte
WBCS(Wide Byte Char Set)	모든문자 - 2byte이상

SBCS, MBCS, WBCS는 문자를 표현하는 용어로, 특정 언어코드나 인코딩 방식이아님.

-----------------------------------------------------------------------------

완성형 : 모든 글자에 번호를 매겨서 표현
조합형 : 자음모음을 조합하여 글자를 만드는 방식으로, 글자표현에 제한이없다.

-----------------------------------------------------------------------------

유니코드 인코딩 방식

UTF - 8	   :  1byte 기본 
(영어권, 웹에서 많이 사용. 이는 옛ANSI코드인 ASCII와 완전히 일치한다.)

UTF - 16  :  2byte 기본 (윈도우 기본 인코딩 방식)
UTF - 32 :   4byte 기본 (잘 사용하지않음)

윈도우는 UTF-16을 쓰지만 다른 대부분의것들은 UTF-8을 사용하므로 문제가능성있음.
따라서 인코딩하는 과정이 수시로 들어간다.(MySQL연동 시)

추가로, 특정하낮의 경우 4byte용량을 사용한다.

-----------------------------------------------------------------------------

BOM(Byte Order Mark)코드 (유니코드 서명)

유니코드는 글자표현에 2byte를 사용하므로, 바이트순서(리틀엔디안, 빅엔디안)중요.
OS나 플랫폼에 다라 바이트정렬이 다를 수 있으므로 이를 확인하기 위한 코드


BOM코드 저장시 아래와같이 저장된다.

UTF - 8 			EF BB BF
UTF - 16 (빅엔디안)		FE FF
UTF - 16 (리틀엔디안)		FF FE
UTF - 32 (빅엔디안)		00 00 FE FF
UTF - 32(리틀엔디안)		FF FE 00 00

이를통해 해당 파일의 바이트오더와 인코딩 방식을 확인 할 수있다.


윈도우의 메모장/편집기는 대부분 BOM코드를 기본으로 사용한다.
유닉스/리눅스 계열(UTF - 8)에서는 사용하지않으므로, 이 BOM코드를 삭제해야한다.

-----------------------------------------------------------------------------

BOM코드로인해 에러가 나는 상황은?

다른OS나 웹서버 업로드시 BOM코드를 삭제해야한다.

-----------------------------------------------------------------------------

BOM코드는 어떻게 삭제?

저장할때 삭제, 수동으로 없애는방법(fseek)

-----------------------------------------------------------------------------

32비트 vs 64비트 차이점

가상메모리 4GB / 16TB차이.

-----------------------------------------------------------------------------

페이징 메모리란?

커널에서 사용하는 메모리. 스왑되어 디스크로 나갈수있음을 뜻함

-----------------------------------------------------------------------------

논페이지드 메모리

매우 중요하므로, 항시 물리메모리에 상주하는 메모리.
소켓프로그래밍이나 TCP프로토콜, 오버랩IO에 사용됨.

-----------------------------------------------------------------------------

실제 프로스세별로 할당되는 메모리는 어느영역인가?

코드영역, 프로세스 메모리영역.

-----------------------------------------------------------------------------

MMU는 뭐임?

하드웨어. 프로세스는 가상메모리 주소를 가지고, 이 주소는 메모리맵의 정보를
거쳐 실질적인 물리 메모리 주소에 접근하게된다.
이역할을 해주는것이 MMU

-----------------------------------------------------------------------------

메모리맵은 어딨나?

물리메모리 내부에들어있고, 컨텍스트 스위칭이 될때마다 이 메모리맵을
CPU레지스터에 세팅. 
세팅되면 CPU안에 MMU가 메모리맵을 참조하여 물리메모리로 찾아감.

-----------------------------------------------------------------------------

Createheap한 힙은 무슨힙인가?

프로세스힙.
new/malloc할때 사용하는 힙은 디폴트 힙이다.

-----------------------------------------------------------------------------

핸들크기는?

포인터 크기와 같음. OS bit를 따라간다.

-----------------------------------------------------------------------------

서버에서 성능과 응답속도가 반비례하는 이유는?

대표적으로 네이글이있음.
제일느린것은 Send/Recv이므로 이둘의 호출량을 줄이면 성능이 올라간다.

하지만 데이터를 모았다가 Send/Recv하므로, 당연히 반응속도는 떨어진다.

-----------------------------------------------------------------------------

syscall이 뭔가?

커널모드 전환 어셈블리어.

-----------------------------------------------------------------------------

커널오브젝트는 접근가능?

유저단에서 절대 접근불가. 핸들로 간접조작이 가능함

-----------------------------------------------------------------------------

커널오브젝트vs유저오브젝트 구분법

인자로 SECURITY_ATTRIBUTES구조체 인자를 받으면 커널 오브젝트이다.

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
